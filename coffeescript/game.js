// Generated by CoffeeScript 1.6.3
(function() {
  var Character, Dear, Element, Frame, Hunter, Keys, Verb, can, con, day, f, game, increment, timeOfDay, v, v2, v3,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Keys = {
    DOWN: [],
    ARROW_RIGHT: 39,
    ARROW_DOWN: 40,
    ARROW_UP: 38,
    ARROW_LEFT: 37,
    SPACE: 32,
    F: 70
  };

  window.Util = {
    distance: function(p1, p2) {
      var xs, ys;
      xs = ys = 0;
      xs = p2.x - p1.x;
      xs = xs * xs;
      ys = p2.y - p1.y;
      ys = ys * ys;
      return Math.sqrt(xs + ys);
    },
    random: function(multiplier) {
      if (multiplier == null) {
        multiplier = 1;
      }
      return Math.random() * this.even() * multiplier;
    },
    randomInt: function(multiplier) {
      if (multiplier == null) {
        multiplier = 1;
      }
      return Math.floor(this.random(multiplier));
    },
    even: function() {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -1;
      }
    }
  };

  window.onkeyup = function(e) {
    return delete Keys.DOWN[1 * e.keyCode];
  };

  window.onkeydown = function(e) {
    Keys.DOWN[1 * e.keyCode] = true;
    switch (e.keyCode) {
      case 32:
      case 37:
      case 38:
      case 39:
      case 40:
        return e.preventDefault();
    }
  };

  can = document.getElementById('c');

  con = can.getContext('2d');

  Verb = (function() {
    function Verb(name, positions) {
      this.name = name;
      this.positions = positions;
      this.images = {};
    }

    return Verb;

  })();

  Frame = (function() {
    function Frame() {
      this.onload = __bind(this.onload, this);
      this.count = 0;
      this.width = 0;
      this.index = 0;
      this.position = 0;
      this.image = void 0;
      this.playspeed = 1 / 4;
      this.repeat = true;
    }

    Frame.prototype.onload = function() {
      this.count = this.image.width / this.image.height;
      this.width = this.image.height;
      return this.index = 0;
    };

    Frame.prototype.reset = function(image) {
      this.image = image;
      image.onload = this.onload;
      this.count = this.image.width / this.image.height;
      this.width = this.image.height;
      return this.index = 0;
    };

    Frame.prototype.draw = function() {
      return con.drawImage(this.image, Math.floor(this.index) * this.width, 0, this.width, this.width, -this.width / 2, -this.width / 2, this.width, this.width);
    };

    Frame.prototype.next = function() {
      this.draw();
      this.index += this.playspeed;
      if (Math.floor(this.index) + 1 > this.count) {
        if (this.repeat) {
          this.index = 0;
        } else {
          this.index = this.count - 1;
        }
      }
      return this.position = this.index * this.width;
    };

    return Frame;

  })();

  Character = (function() {
    function Character(name, verbs, x, y) {
      this.name = name;
      this.verbs = verbs;
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
      this.die = __bind(this.die, this);
      this.image = void 0;
      this.position = void 0;
      this.idles = {};
      this.initSprites();
      this.frame = new Frame();
      this.action = "idle";
      this.speed = 8;
      this.alive = true;
      this.respawnId = void 0;
    }

    Character.prototype.initSprites = function() {
      var position, positions, verb, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      positions = [];
      _ref = this.verbs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        verb = _ref[_i];
        _ref1 = verb.positions;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          position = _ref1[_j];
          verb.images[position] = new Image();
          verb.images[position].src = "img/larger/characters/" + this.name + "/" + position + "_" + verb.name + ".png";
          if (__indexOf.call(positions, position) < 0) {
            positions.push(position);
          }
        }
      }
      for (_k = 0, _len2 = positions.length; _k < _len2; _k++) {
        position = positions[_k];
        this.idles[position] = {};
        this.idles[position].image = new Image();
        this.idles[position].image.src = "img/larger/characters/" + this.name + "/" + position + "_idle.png";
      }
      return this.position = positions[0];
    };

    Character.prototype.chooseAction = function() {
      return void 0;
    };

    Character.prototype.die = function() {
      if (this.alive) {
        this.alive = false;
        return this.respawnId = setInterval(this.respawn, 2000);
      }
    };

    Character.prototype.update = function() {
      var verb, _i, _len, _ref, _ref1;
      _ref = this.verbs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        verb = _ref[_i];
        if (this.action === verb.name && (_ref1 = this.position, __indexOf.call(verb.positions, _ref1) >= 0)) {
          if (this.image !== verb.images[this.position]) {
            this.image = verb.images[this.position];
            this.frame.reset(this.image);
          }
          break;
        }
      }
      if (this.action !== "idle") {
        return this.frame.next();
      } else {
        if (this.image !== this.idles[this.position].image) {
          this.image = this.idles[this.position].image;
          this.frame.reset(this.image);
        }
        return this.frame.next();
      }
    };

    return Character;

  })();

  Dear = (function(_super) {
    __extends(Dear, _super);

    function Dear(name, verbs, x, y) {
      this.name = name;
      this.verbs = verbs;
      this.x = x;
      this.y = y;
      this.respawn = __bind(this.respawn, this);
      this.act = __bind(this.act, this);
      this.canSee = __bind(this.canSee, this);
      Dear.__super__.constructor.call(this, this.name, this.verbs, this.x, this.y);
      this.spawnRadius = 5;
    }

    Dear.prototype.canSee = function(character) {
      var _ref, _ref1, _ref2, _ref3;
      return this.position === "right" && (this.x < (_ref = character.x) && _ref < this.x + 100) && (this.y - 50 < (_ref1 = character.y) && _ref1 < this.y + 50) || this.position === "left" && (this.x > (_ref2 = character.x) && _ref2 > this.x - 100) && (this.y - 50 < (_ref3 = character.y) && _ref3 < this.y + 50);
    };

    Dear.prototype.act = function(character) {
      if (!this.alive) {
        this.action = "die";
        return this.frame.repeat = false;
      } else if (this.canSee(character)) {
        this.action = "run";
        return this.position = this.position === "right" ? "left" : "right";
      } else if (this.action === "run" && Util.distance(character, this) < 150) {
        if (this.position === "left") {
          return this.x -= 1 * this.speed;
        } else if (this.position === "right") {
          return this.x += 1 * this.speed;
        }
      } else if (this.action === "run") {
        this.position = this.position === "right" ? "left" : "right";
        return this.action = "idle";
      } else {
        return this.action = "idle";
      }
    };

    Dear.prototype.respawn = function() {
      clearInterval(this.respawnId);
      this.x = this.x + Util.randomInt(this.spawnRadius);
      this.y = Util.randomInt(200);
      this.alive = true;
      this.action = "idle";
      this.position = this.position === "right" ? "left" : "right";
      this.frame.repeat = true;
      return this.spawnRadius += 10;
    };

    return Dear;

  })(Character);

  Element = (function() {
    function Element(x, y, imagePath) {
      this.x = x;
      this.y = y;
      this.imagePath = imagePath;
      this.frame = new Frame();
      this.image = new Image();
      this.image.src = this.imagePath;
      this.frame.reset(this.image);
    }

    Element.prototype.update = function() {
      return this.frame.next();
    };

    return Element;

  })();

  Hunter = (function(_super) {
    __extends(Hunter, _super);

    function Hunter(name, verbs, x, y) {
      this.name = name;
      this.verbs = verbs;
      this.x = x;
      this.y = y;
      Hunter.__super__.constructor.call(this, this.name, this.verbs, this.x, this.y);
      this.carrying = false;
      this.family = {
        status: "healthy",
        children: 2,
        adults: 2,
        starved: 0
      };
      this.status = "peckish";
    }

    Hunter.prototype.kill = function(character) {
      if (Util.distance(this, character) < 60) {
        if (character.alive) {
          character.die();
          this.carrying = true;
          document.getElementById("snd_drum2").currentTime = 1;
          return document.getElementById("snd_drum2").play();
        } else {
          document.getElementById("snd_drum2").currentTime = 1;
          return document.getElementById("snd_drum4").play();
        }
      } else {
        document.getElementById("snd_drum2").currentTime = 1;
        return document.getElementById("snd_drum3").play();
      }
    };

    Hunter.prototype.hunger = function() {
      if (this.status === "starving") {
        if (this.alive) {
          this.alive = false;
          this.status = "dead";
          console.log("you lasted " + day + " days but you have starved...");
        }
      }
      if (this.status === "hungry") {
        this.status = "starving";
      }
      if (this.status === "peckish") {
        this.status = "hungry";
      }
      if (this.status === "healthy") {
        this.status = "peckish";
      }
      if (this.family.status === "starving") {
        if (this.family.adults > 0) {
          this.family.adults--;
          this.family.starved++;
        } else if (this.family.children > 0) {
          this.family.children--;
          this.family.starved++;
        }
      }
      if (this.family.status === "hungry") {
        this.family.status = "starving";
      }
      if (this.family.status === "peckish") {
        this.family.status = "hungry";
      }
      if (this.family.status === "healthy") {
        return this.family.status = "peckish";
      }
    };

    Hunter.prototype.eat = function() {
      document.getElementById("snd_drum5").play();
      console.log("eat");
      if (this.status === "peckish") {
        this.status = "healthy";
      }
      if (this.status === "hungry") {
        this.status = "peckish";
      }
      if (this.status === "starving") {
        this.status = "hungry";
      }
      if (c.family.status === "healthy" && c.family.adults > 0) {
        return c.family.children++;
      }
    };

    Hunter.prototype.feed = function() {
      document.getElementById("snd_drum6").play();
      console.log("feed");
      if (this.family.status === "peckish") {
        this.family.status = "healthy";
      }
      if (this.family.status === "hungry") {
        this.family.status = "peckish";
      }
      if (this.family.status === "starving") {
        this.family.status = "hungry";
      }
      if (c.family.status === "healthy" && c.family.adults > 0) {
        return c.family.children++;
      }
    };

    Hunter.prototype.act = function(d) {
      switch (this.status) {
        case "healthy":
          this.speed = 10;
          this.frame.playspeed = 1 / 3;
          break;
        case "peckish":
          this.speed = 6;
          break;
        case "hungry":
          this.speed = 5;
          this.frame.playspeed = 1 / 4;
          break;
        case "starving":
          this.speed = 3;
          this.frame.playspeed = 1 / 5;
      }
      if (this.carrying) {
        this.action = "carry";
        if (Keys.DOWN[Keys.ARROW_UP]) {
          this.position = "back";
          this.y -= 1 * this.speed;
        } else if (Keys.DOWN[Keys.ARROW_DOWN]) {
          this.position = "front";
          this.y += 1 * this.speed;
        } else if (Keys.DOWN[Keys.ARROW_LEFT]) {
          this.position = "left";
          this.x -= 1 * this.speed;
        } else if (Keys.DOWN[Keys.ARROW_RIGHT]) {
          this.position = "right";
          this.x += 1 * this.speed;
        } else if (Keys.DOWN[Keys.F]) {
          this.action = "walk";
          this.carrying = false;
          if (Util.distance(this, {
            x: 0,
            y: 0
          }) < 75) {
            this.feed();
          } else {
            this.eat();
          }
          console.log(this.status);
        }
      } else if (Keys.DOWN[Keys.SPACE]) {
        this.action = "attack";
        this.kill(d);
      } else if (Keys.DOWN[Keys.ARROW_UP]) {
        this.action = "walk";
        this.position = "back";
        this.y -= 1 * this.speed;
      } else if (Keys.DOWN[Keys.ARROW_DOWN]) {
        this.action = "walk";
        this.position = "front";
        this.y += 1 * this.speed;
      } else if (Keys.DOWN[Keys.ARROW_LEFT]) {
        this.action = "walk";
        this.position = "left";
        this.x -= 1 * this.speed;
      } else if (Keys.DOWN[Keys.ARROW_RIGHT]) {
        this.action = "walk";
        this.position = "right";
        this.x += 1 * this.speed;
      } else {
        this.action = "idle";
      }
      if (this.action === "walk") {
        document.getElementById('snd_walk').play();
        if (document.getElementById('snd_walk').currentTime > 4) {
          return document.getElementById('snd_walk').currentTime = 0;
        }
      } else {
        return document.getElementById('snd_walk').pause();
      }
    };

    return Hunter;

  })(Character);

  window.c = new Hunter("hunter", [new Verb("walk", ["front"]), new Verb("walk", ["left"]), new Verb("walk", ["right"]), new Verb("walk", ["back"]), new Verb("attack", ["front", "left", "right", "back"]), new Verb("carry", ["front", "left", "right", "back"])], 100, 40);

  window.d = new Dear("dear", [new Verb("run", ["right", "left"]), new Verb("die", ["right", "left"])], -60, -100);

  f = new Element(0, 0, "img/larger/elements/fire/idle.png");

  v = new Element(0, -40, "img/larger/elements/villager/idle.png");

  v2 = new Element(-25, -25, "img/larger/elements/villager/idle.png");

  v3 = new Element(25, -25, "img/larger/elements/villager/idle.png");

  timeOfDay = 0;

  day = 1;

  increment = 0.1;

  game = {
    loopID: void 0,
    restartID: void 0,
    loop: function() {
      var fire, volume;
      can.width = can.width;
      con.translate(can.width / 2, can.height / 2);
      if (c.family.children + c.family.adults > 0) {
        con.save();
        con.translate(v2.x - c.x, v2.y - c.y);
        v2.update();
        con.restore();
      }
      if (c.family.children + c.family.adults > 4) {
        con.save();
        con.translate(v.x - c.x, v.y - c.y);
        v.update();
        con.restore();
      }
      if (c.family.children + c.family.adults > 8) {
        con.save();
        con.translate(v3.x - c.x, v3.y - c.y);
        v3.update();
        con.restore();
      }
      con.save();
      con.translate(f.x - c.x, f.y - c.y);
      f.update();
      con.restore();
      con.save();
      con.translate(d.x - c.x, d.y - c.y);
      d.act(c);
      d.update();
      con.restore();
      con.save();
      c.act(d);
      c.update();
      con.restore();
      fire = document.getElementById("snd_fire");
      if (fire.currentTime === 0) {
        fire.play();
      }
      if (fire.currentTime > 8) {
        fire.currentTime = 0;
      }
      volume = 1 - (Util.distance(c, {
        x: 0,
        y: 0
      }) / 200);
      if ((0 < volume && volume < 1)) {
        fire.volume = volume;
      }
      return game.status();
    },
    night: function() {
      can.style.backgroundColor = "rgba(0,0,50," + timeOfDay + ")";
      timeOfDay += increment;
      if (timeOfDay > 1) {
        return increment = -0.0125;
      } else if (timeOfDay < 0 && c.alive) {
        increment = 0.0125;
        day++;
        c.hunger();
        document.getElementById("snd_drum1").play();
        if (day % 10 === 0 && c.family.children > 0) {
          c.family.adults++;
          return c.family.children--;
        }
      }
    },
    restart: function() {
      clearInterval(game.restartID);
      console.log("restart", game.restartID);
      day = 1;
      c.carrying = false;
      c.family = {
        status: "healthy",
        children: 2,
        adults: 2,
        starved: 0
      };
      c.status = "peckish";
      c.x = 100;
      c.y = 40;
      d.x = -60;
      d.y = -100;
      d.spawnRadius = 5;
      c.alive = true;
      game.loopID = setInterval(game.loop, 1000 / 30);
      return document.getElementById("snd_fire").play();
    },
    status: function() {
      document.getElementById('dayDisplay').innerHTML = "Day: " + day;
      if (c.carrying) {
        if (Util.distance(c, {
          x: 0,
          y: 0
        }) > 75) {
          document.getElementById('adviceDisplay').innerHTML = "Eat: (F)";
        } else {
          document.getElementById('adviceDisplay').innerHTML = "Feed Family: (F)";
        }
      } else {
        document.getElementById('adviceDisplay').innerHTML = "Swing: (Spacebar), Hunt: (Arrow Keys)";
      }
      document.getElementById('youDisplay').innerHTML = "You are " + c.status;
      document.getElementById('familyDisplay').innerHTML = "Your family is " + c.family.status;
      document.getElementById('gameDisplay').innerHTML = "You have " + c.family.adults + " wives and " + c.family.children + " children.  " + c.family.starved + " of your family have starved.";
      if (!c.alive) {
        document.getElementById('youDisplay').innerHTML = "You are " + c.status;
        console.log("loopID", game.loopID);
        clearInterval(game.loopID);
        document.getElementById("snd_fire").pause();
        document.getElementById("snd_walk").pause();
        return game.restartID = setInterval(this.restart, 8000);
      }
    }
  };

  game.loopID = setInterval(game.loop, 1000 / 30);

  setInterval(game.night, 62.5);

}).call(this);
